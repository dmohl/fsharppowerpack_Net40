<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.PowerPack.Linq</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.ToLinqExpression(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Convert the quotation expression to LINQ expression trees

 This operation will only succeed for a subset of quotation expressions.

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.EvaluateUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Evaluate``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.CompileUntyped(Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluator.Compile``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Compile the quotation expression by first converting to LINQ expression trees

 Exceptions: InvalidArgumentException will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.ExtraHashCompare.GenericNotEqualIntrinsic``1(``0,``0)">
<summary>
 An intrinsic for compiling &lt;c&gt;&amp;lt;@ x &lt;&gt; y @&amp;gt;&lt;/c&gt; to expression trees
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.ExtraHashCompare">

</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.groupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc`2{``0,``2},Microsoft.FSharp.Core.FSharpFunc`2{``1,``2},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{System.Collections.Generic.IEnumerable{``1},``3}})">
<summary>
 This join operator implements the LINQ GroupJoin operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Microsoft.FSharp.Core.FSharpFunc`2{``0,``2},Microsoft.FSharp.Core.FSharpFunc`2{``1,``2},Microsoft.FSharp.Core.FSharpFunc`2{``0,Microsoft.FSharp.Core.FSharpFunc`2{``1,``3}})">
<summary>
 This join operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.groupBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Join operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.maxBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Max operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.maxBy&lt;/c&gt;
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.minBy``2(Microsoft.FSharp.Core.FSharpFunc`2{``0,``1},System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Min operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
 It differs in return type from &lt;c&gt;Seq.minBy&lt;/c&gt;
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.contains``1(``0,System.Collections.Generic.IEnumerable{``0})">
<summary>
 When used in queries, this operator corresponds to the LINQ Contains operator and the &lt;c&gt;query&lt;/c&gt; convertor recognises it as such
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QueryModule.query``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Evaluate the quotation expression by first converting to a LINQ expression tree
 making use of IQueryable operators and then executing expression tree

 Exceptions: &lt;c&gt;InvalidArgumentException&lt;/c&gt; will be raised if the input expression is
 not in the subset that can be converted to a LINQ expression tree
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QueryModule">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation.MemberInitializationHelperType">
<summary>
 This type should not be called directly. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.MemberInitializationHelper``1(Microsoft.FSharp.Linq.QuotationEvaluation.MemberInitializationHelperType)">
<summary>
 This function should not be called directly. 
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.QuotationEvaluation.LinqExpressionHelper``1(``0)">
<summary>
 This function should not be called directly. 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation.HelperTypes">
<summary>
 A set of types used for implementing quotation conversions.
 These are public only because targets of Linq Lambda expressions require them to be so
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.QuotationEvaluation">
<summary>
 This module provides Compile and Eval extension members
 for F# quotation values, implemented by translating to LINQ
 expression trees and using the LINQ dynamic compiler.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.ComparableType">
<summary>
 Wrapper for System.Type that implements the &apos;comparable&apos;
 constraint (to make it possible to use types as keys of Map)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.IQuotationAdapter">
<summary>
 Represents a rule that modifies quotations in some way
 Processing quotations and types recursively can be done using
 IQuotationTransformation passed as argument
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.IQuotationTransformation">
<summary>
 Represents a transformation of quotations that changes both 
 expressions and types (e.g. to replace &apos;int&apos; with &apos;string&apos;)
 (Recursively processes the whole quotation or type)
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`1">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`2">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`3">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`4">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`5">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`6">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`7">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.MutableTuple`8">
<summary>
 This type shouldn&apos;t be used directly from user code.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.ParameterizedType.Rebuild(Microsoft.FSharp.Collections.FSharpList{System.Type})">
<summary>
 Provide arguments to the parameterized type
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.ParameterizedType">
<summary>
 Represents information about System.Type that has one or more
 type parameters (and can be reconstructed when arguments are 
 provided). The type can be pointer, byref, generic or array.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Adapters.TupleAdapter.Microsoft-FSharp-Linq-Runtime-IQuotationAdapter-AdaptType(Microsoft.FSharp.Linq.Runtime.IQuotationTransformation,System.Type)">
<summary>
 Turns all top-level uses of tuple into mutable tuples
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Adapters.TupleAdapter.Microsoft-FSharp-Linq-Runtime-IQuotationAdapter-AdaptExpr(Microsoft.FSharp.Linq.Runtime.IQuotationTransformation,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Turns all tupl-level uses of &apos;NewTuple&apos; and &apos;TupleGet&apos; into
 corresponding calls (constructor / property get) on mutable tuples
</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.Adapters.TupleAdapter">
<summary>
 Adapts tuples in quotations.
 (Replace uses of the tuple type with &apos;MutableTuple&apos; type which
 has get/set properties &amp; parameterless constructor and can be used
 in LINQ to Entities)
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Adapters.RecordAdapter.Microsoft-FSharp-Linq-Runtime-IQuotationAdapter-AdaptType(Microsoft.FSharp.Linq.Runtime.IQuotationTransformation,System.Type)">
<summary>
 Turns all top-level uses of records into tuples
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Adapters.RecordAdapter.Microsoft-FSharp-Linq-Runtime-IQuotationAdapter-AdaptExpr(Microsoft.FSharp.Linq.Runtime.IQuotationTransformation,Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Turns all tupl-level uses of &apos;NewTuple&apos; and &apos;TupleGet&apos; into
 corresponding calls (constructor / property get) on mutable tuples
</summary>
</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.Adapters.RecordAdapter">
<summary>
 Adapts records in quotations (Replaces uses of records with tuples
 which can be later removed using TupleAdapter)
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Adapters.|Let|``2(``0,``1)">
<summary>
 Declare symbol inside pattern. For example:
  | Let 1 (i, &lt;NestedPattern#1&gt;) 
  | Let 2 (i, &lt;NestedPattern#2&gt;) -&gt;
      // i will be either 1 or 2
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.Adapters">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.Execution">

</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Transformations.transformQuotation(Microsoft.FSharp.Linq.Runtime.IQuotationAdapter,Microsoft.FSharp.Collections.FSharpMap{Microsoft.FSharp.Quotations.FSharpVar,Microsoft.FSharp.Quotations.FSharpVar},Microsoft.FSharp.Quotations.FSharpExpr)">
<summary>
 Transform quotation using the specified quotation transformation.
 This replaces expressions according to the &apos;TransformExpr&apos; and 
 replaces types according to the &apos;TransformType&apos; method.
</summary>
</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.Transformations.transformType(Microsoft.FSharp.Linq.Runtime.IQuotationAdapter,Microsoft.FSharp.Linq.Runtime.IQuotationTransformation,System.Type)">
<summary>
 Transform a specified type using quotation adapter
 (This recursively processes all type parameters of the type as well.)
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.Transformations">

</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.TypeExtensions">

</member>
<member name="M:Microsoft.FSharp.Linq.Runtime.TypePatterns.|Parameterized|Parameter|Primitive|(System.Type)">
<summary>
 Decompose type into several options - A type can be
 primitive type, type parameter or parameterized type
</summary>
</member>
<member name="T:Microsoft.FSharp.Linq.Runtime.TypePatterns">

</member>
</members>
</doc>
